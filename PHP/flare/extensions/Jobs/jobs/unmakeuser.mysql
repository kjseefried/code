#!/usr/bin/php
#
# @package Flare
# @author Tim Rupp <tarupp01@indianatech.net>
# @copyright GPL
#
# Copyright (C) 2004-2005 Indiana Tech Open Source Committee
# Please direct all questions and comments to TARupp01@indianatech.net
#
# This program is free software; you can redistribute it and/or modify it under the terms of
# the GNU General Public License as published by the Free Software Foundation; either version
# 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program;
# if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston,
# MA 02111-1307, USA.
#

<?php

require ("Console/Getopt.php");

$flaredir	= '';
$cg 		= new Console_Getopt();

/**
* Allowed arguments include
*/
$allowedShortOptions 	= "";
$allowedLongOptions 	= array("flaredir=","username=");

// read the command line
$args = $cg->readPHPArgv();

// get the options
$ret = $cg->getopt($args, $allowedShortOptions, $allowedLongOptions);

// check for errors and die with an error message if there was a problem
if (PEAR::isError($ret)) {
    die ("Error in command line: " . $ret->getMessage() . "\n");
    }

$opts = $ret[0];
if (sizeof($opts) > 0) {
	// if at least one option is present
	foreach ($opts as $o) {
		switch ($o[0]) {
			// handle the size option
			case '--flaredir':
				$config_file = $o[1];
				break;
			case '--username':
				$username = $o[1];
				break;
		}
	}
}

if ($flaredir == '')
	die("You must specify a Flare installation to use files from.");
else {
	require_once($flaredir."/config-inc.php");
	require_once($flaredir."/db/mysql.php");
}

if ($username == '')
	die("Username cannot be empty!");

$db     = new DB(_DBUSER, _DBPWRD, _DBUSE, _DBSERVER, _DBPORT);
	
$sql = array(
	"drop" => "DROP DATABASE `:1`;",
	'user' => "DELETE FROM `user` WHERE CONVERT( User USING utf8 ) = CONVERT( ':1' USING utf8 ) AND CONVERT( Host USING utf8 ) = CONVERT( 'localhost' USING utf8 );",
	'db' => "DELETE FROM `db` WHERE CONVERT( User USING utf8 ) = CONVERT( ':1' USING utf8 ) AND CONVERT( Host USING utf8 ) = CONVERT( 'localhost' USING utf8 );",
	'tblpriv' => "DELETE FROM `tables_priv` WHERE CONVERT( User USING utf8 ) = CONVERT( ':1' USING utf8 ) AND CONVERT( Host USING utf8 ) = CONVERT( 'localhost' USING utf8 );"
	'clmpriv' => "DELETE FROM `columns_priv` WHERE CONVERT( User USING utf8 ) = CONVERT( ':1' USING utf8 ) AND CONVERT( Host USING utf8 ) = CONVERT( 'localhost' USING utf8 );",
	'flush' => "FLUSH PRIVILEGES;"
);

$stmt1 = $db->prepare($sql['drop']);
$stmt2 = $db->prepare($sql['user']);
$stmt3 = $db->prepare($sql['db']);
$stmt4 = $db->prepare($sql['tblpriv']);
$stmt5 = $db->prepare($sql['clmpriv']);
$stmt6 = $db->prepare($sql['flush']);

$stmt1->execute($username);
$stmt2->execute($username);
$stmt3->execute($username);
$stmt4->execute($username);
$stmt5->execute($username);
$stmt6->execute();

?>
